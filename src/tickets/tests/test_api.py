import pytest
import os
from tickets.api import core_verify_proof
from dotenv import load_dotenv
from fastapi.exceptions import HTTPException

# Specify the path to your .env file
# Add custom path
dotenv_path = 'src/tickets/.env'
load_dotenv(dotenv_path)

# Override verifier private key to hardhat
os.environ['VERIFIER_PRIVATE_KEY'] = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

def open_file(file_path):
    with open(file_path, 'r') as file:
        return file.read()

@pytest.mark.parametrize("proof_data, expected_output", [
    ({
        "payment_type": "ticket",
        "circuit_type": "response",
        "snark_proof": "{\"pi_a\":[\"5222132548786444186049566666735205037929285988574035999036392387424841246856\",\"9662834833267364476493886422783956141658815493886980096707230551637317901719\",\"1\"],\"pi_b\":[[\"20015836557270081479495551460299622662952710861244426703808693487835514231486\",\"3376781576014043042170246130886103719817608135667428890343123349888704518955\"],[\"10506745608047192906094436217613951190042835575538252670973639377018167436422\",\"11189666347125545448387872239514037702224791096854307666429228847228565193062\"],[\"1\",\"0\"]],\"pi_c\":[\"21248549555610716662113390569683311069423390925849768345797442284539955188005\",\"4238855283572780558192535088837122966134261638073418272121423323411112437859\",\"1\"],\"protocol\":\"groth16\",\"curve\":\"bn128\"}",
        "ciphertext": "906aa2047339b4de622e145c4446d961adada3fc",
        "plaintext": "585858586f2c2073656375726520776f726c6421e4315023aa97de16131bed6e90905caf2aad91a6edbb487ccc7b1c137e9ee146796d63b4d62a460f7321b95d",
        "start_index": "8",
        "end_index": "40",
        "attestation": "304502210082f68690f5c576dd0f8612cb83b02e524a12a36b19ded4352942cb0181e135f50220146f12d992d3f3d340f72c53381f5c45f75fdbd88be0b0c469631dd5b67e0c80",
        "attested_request_ciphertext": "160303016c010001680303fc15ee8ad82b57542e1be932da84eea0bb473deb24b6e242f0eba5115c20e95b20bbc3c8be27ecd560fc597c5478af9ec7a8cf58dbb9959ef679e01c618dffa77a0002cca80100011d0000000e000c0000093132372e302e302e31000a0008000600170018001d00230000002b00050403040303000d000e000c050304030807080406010401002d0003020001003300d000ce00170041048aa70294ea1ae86ad7c91de77e415ab8a3b21b97509284339684843d507c743254896016951ee1152dcfa74391eee42206034a28762795dadbce7cf78352a6d70018006104d0828791bfc4f5f3297ed690eafc9a805bb0236c66e1100692eb78c5663e34d6512dde99a4a4ca657c068fd4ddb7aa2a2b9d8e42e13628850275634975739b11b453f546a596b2400968670967f4014ddeabda7ee27f2d62d0bb5c88c472f68d001d00203102290a7702bfaeff1ca37cc251e535408e2b1c3342ae86a239ab5150685824ff01000100160303002510000021203102290a7702bfaeff1ca37cc251e535408e2b1c3342ae86a239ab5150685824140303000101160303002063088e01e0a0611f8468c111a3f6750d2ac62b20afb62dba637307001781fcb81703030033c110c25a2b33f0d43d3c58bcf56671ae1fd8d8729b39a6be42cf4a3d7053f94be9191f9e5414320a7c0e84b8468219be21ca0c",
        "attested_response_ciphertext": "1603030035020000310303c83ba7b57ee280f885808d758c68767cd36492711bbe8c9ef6c1ad6f83ec81e400cca8000009ff010001000023000016030303790b00037500037200036f3082036b30820253a003020102021401a9ef49befb481294e65970dbac02b1fd46355a300d06092a864886f70d01010b05003045310b30090603550406130241553113301106035504080c0a536f6d652d53746174653121301f060355040a0c18496e7465726e6574205769646769747320507479204c7464301e170d3234303630383136313833315a170d3235303630383136313833315a3045310b30090603550406130241553113301106035504080c0a536f6d652d53746174653121301f060355040a0c18496e7465726e6574205769646769747320507479204c746430820122300d06092a864886f70d01010105000382010f003082010a0282010100aa19b8aa71b9868d2b025711555747e52172c2b693662be76b1475765962dc6eed882c4aacb9b11ae9f8c68969a046d4a8b0a69b83859c8064066da29bcda7ba98eb64808e859d1b71fcf7640e5521929c32ba1358305bade7b9123b9744853e8f2a5b77f7249323355e29a07d802ed60d57d548ef8ea312bd4f46e3821fbb78895c573bd241bb8394c85d46c665d5668b539178ba6a07aefcf7527b51a83e22bf11ebb7a7035ddf2a650d0e4a3437cb35968cd2195da3b5b9d68152f84c8b5694c17bd6996d1357be4b41b85d56b10bfaace4ac034c43b7dfdbbadc08aa85856d0210e5330e892dd9dcfb1039bdf3e9ed3206744ab83725d6f002995c4f6aef0203010001a3533051301d0603551d0e0416041451817aecf9c358ef5c53745e1f8742f2175df7e1301f0603551d2304183016801451817aecf9c358ef5c53745e1f8742f2175df7e1300f0603551d130101ff040530030101ff300d06092a864886f70d01010b05000382010100a40869261d0ba01b7bd8d95ac3671610c9f1657a7cbe2bf2e9c80d0ad20efd5767936e5300577f68fb1c9ee2611f471878382f0d66954fc3e5ed9f821a4bc6064adadca758fded3b5551e9ae4c8223744664a7986678de11134d9dd7375c107c5ab2db35371aee4b2b20d335f2cfe8d7b9c12ef44c4df37dcbefbef8915c584fc6d03ddcce500c95c6ae8d1528f058d6ba1a218e6c875d759f11b1eefef3b64a883f40f5dfb1f06176c2c93ef3e42228c3f548f0a90da628e8fd8b417d5f84e4646cd46868c32561a80849e4a2c139e71438718df6cb0c16ecfbc6897db544307595a52e086a2d2f5478ed89aa0b8ce6d34b893c4c91939e7c7091d6da063c40160303012c0c00012803001d20ccafe370d6e0797738358832230e122bfaef7579bb76cd950ab3994099b6284f080401000ac4b820dbe9d70aa3a9a8d6918dc8b67c8fb42716f214f3eba7b560f1f532545ee66cebfb4ca56a9a0d6d0dc6ba428196a0adf2290210ac1a617d888d91013791c204cbd24f22d4d60d87db7307e0a8490d8531f42d933233c84e79d6f5e6e6a47603cdb0ca8ff2d41712a95679cd97eef782ca9b617a9f53272fe68e5d547b5c64d55aeb7ef32c6b1198716dc05890766be2bfd9fa9f8ee016a45fff8f7b14c356b49555ef693c90e614233fc8da81a39a44b107c6e1ec9af615890b6bb0894846cbee419f23f9ee350695312a2a745e86d0d27983a323be05ce223dabf5253e339659a7fd38e2eb1b5f5cb395611ab92558dbab514c6118778121e32da3af16030300040e00000016030300aa040000a600001c2000a076278b81ff8b38a61399e396f9eb6acec36ae88dddb92aab6ffb08c948fc4a940dfb42cdeb413110832ab854504ff8e63a1789563232b69c248312fe17609ee22657ebae074e51ff409a32fe977ff515627cc569deb8a3520af78e192d3160ff63c83f9beecc18dfb2cf6593ea21a609c442e0cb23f9c9588bc259032ba0ef50070574d98cb63ad3d260a0d8f9ab2dade8e2e1d46808bc0815a45882552e4e241403030001011603030020cbf7ff06ce8ffd92657185f03ab70bc5bd6a7fa5fd15f65c542534a28cfd5cf01703030087de7cf9e5de5f9d6b62dd26d641546402bc078a0a78f84b5793812b4e6b127204014d0845f7169d97cb62dd1a31ddd8b51024e0c497a84d535708d1a6a36088aa1cb94a826fcf1c22cf977f1d4a055ad03dd478c5a42f10a974c63875d645ae3f0969d648ce1c90e946a33e49a25906f74f86f39c96fc8ce333c46d5d141faacc915253e8f345251703030024805796307339b4de622e145c4446d961adada3fc7690f8b9f6c9fd49e964953b4d3b5a40",
        "attester_key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEHgLyIgatbAKkN41q+IHHoGcH+pkA\no5hZBYbF5qUs0ePfKzGJwuGUWOahY22tTlF3viLuzBBOkdkhPcso3U07Eg==\n-----END PUBLIC KEY-----\n",
    }, {
        'proof': '0x102a2e8a06b42fa1ddd0ce165eef155403bfe5cf2bed4bf6ae439e59b3c5060a578475bc20c81747fdff43189bcfdfcd04ff7b3e0627a66934261a05834810fe1b', 
        'public_values': ['secure', '88924467004650269181642096191057047124572602956550366837824023448166143063056']    
    })
])
def test_verify_proof(proof_data, expected_output):
    # Construct the email data
    result = core_verify_proof(proof_data)
    print (result)
    assert result == expected_output

